$gray-base:              #000 !default;
$gray-darker:            lighten($gray-base, 13.5%) !default; // #222
$gray-dark:              lighten($gray-base, 20%) !default;   // #333
$gray:                   lighten($gray-base, 33.5%) !default; // #555
$gray-light:             lighten($gray-base, 46.7%) !default; // #777
$gray-lighter:           lighten($gray-base, 93.5%) !default; // #eee

$brand-primary:          darken(#428bca, 6.5%) !default; // #337ab7
$brand-success:          #5cb85c !default;
$brand-info:             #5bc0de !default;
$brand-warning:          #f0ad4e !default;
$brand-danger:           #d9534f !default;
//Color Map 
$color-stack:
  (group: gray, id: normal, color: $gray),
  (group: gray, id: darker, color: $gray-darker),
  (group: gray, id: dark, color: $gray-dark),
  (group: gray, id: light, color: $gray-light),
  (group: gray, id: lighter, color: $gray-lighter),
  (group: brand, id: normal, color: $brand-primary),
  (group: brand, id: success, color: $brand-success),
  (group: brand, id: info, color: $brand-info),
  (group: brand, id: warning, color: $brand-warning),
  (group: brand, id: danger, color: $brand-danger);
// Color  Function
/**
 * [color return the passing color of group ]
 * @param  {[type]} $group          [group name]
 * @param  {[type]} $shade:normal   [the color id]
 * @param  {[type]} $transparency:1 [transparent-dmixinefault value : 1]
 * @return {[type]}                 [Return 16 color or RGBA color ]
 */
@function color($group, $shade: normal, $transparency:1){
  @each $color in $color-stack{
    $key-group: map-get($color, group);
    $key-shade: map-get($color, id);
    $key-color: map-get($color, color);
    @if($group == $key-group and $shade == $key-shade){
      @return rgba($key-color,$transparency);
    }
  }
}
/***demo***
body{
  color: color(blue, normal,.8);
}
p{
  color: color(orange);
}
blockquote{
  color: color(blue);
  background: color(orange, pale,.4);
  border-color: color(orange, dark);
}*/